FROM node:18-alpine AS deps

# Create app directory
WORKDIR /app

# Copy required config files
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# Install app dependencies
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
  else echo "Lockfile not found." && npm install; \
  fi

# Rebuild the source code only when needed
FROM node:18-alpine AS builder

WORKDIR /app

# Copy app source to the image
COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN SUPABASE_URL=https://APP_NEXT_RUNTIME_SUPABASE_URL \
  SUPABASE_ANON_KEY=APP_NEXT_RUNTIME_SUPABASE_ANON_KEY \
  FRONTEND_SERVICE=APP_NEXT_RUNTIME_FRONTEND_SERVICE \
  QUESTION_PATH=APP_NEXT_RUNTIME_QUESTION_PATH \
  USER_PATH=APP_NEXT_RUNTIME_USER_PATH \
  MATCHING_PATH=APP_NEXT_RUNTIME_MATCHING_PATH \
  ROOM_PATH=APP_NEXT_RUNTIME_ROOM_PATH \
  SIGNALING_PATH=APP_NEXT_RUNTIME_SIGNALING_PATH \
  VIDEO_PATH=APP_NEXT_RUNTIME_VIDEO_PATH \
  AGORA_ID=APP_NEXT_RUNTIME_AGORA_ID \
  CODE_EXECUTION_PATH=APP_NEXT_RUNTIME_CODE_EXECUTION_PATH \
  npm run build

FROM node:18-alpine AS runner

RUN apk add --no-cache bash

WORKDIR /app

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
RUN chown -R nextjs:nodejs /app


COPY --from=builder --chown=nextjs:nodejs /app/entrypoint.sh ./entrypoint.sh

RUN chmod +x ./entrypoint.sh

COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

RUN ls /app

ENTRYPOINT ["/app/entrypoint.sh"]

# ENTRYPOINT ["/bin/sh", "-c", "sh /app/entrypoint.sh"]

# ENTRYPOINT ["/bin/bash", "/app/entrypoint.sh"]


# ENTRYPOINT [ "ls", "-l" ]

# ENTRYPOINT ["/bin/sh"]

# Expose the app on port 3000
EXPOSE 3000

# Command to run the application
CMD ["node", "server.js"]