#Question Service
steps:
  # Step 1: Create the .env file in backend/question_service/src
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret=question_service > backend/question_service/src/.env
        # Add any additional steps to modify or process the .env file as needed.
  # Step 2: Build your Docker image in backend/question_service
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/question_service'
      - ./backend/question_service
    # Add any other Docker build options as needed.

  # Step 3: Delete the .env file
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        rm backend/question_service/src/.env
  # Step 4: Run tests
  - name: 'gcr.io/$PROJECT_ID/question_service'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd /app  # Change to your project directory.
        npm test  # Run your tests.
# #Matching Service
#   # Step 1: Create the .env file in backend/matching_service/src
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         gcloud secrets versions access latest --secret=matching_service > backend/matching_service/src/.env
#         # Add any additional steps to modify or process the .env file as needed.
#   # Step 2: Build your Docker image in backend/matching_service
#   - name: 'gcr.io/cloud-builders/docker'
#     args:
#       - 'build'
#       - '-t'
#       - 'gcr.io/$PROJECT_ID/matching_service'
#       - ./backend/matching_service
#     # Add any other Docker build options as needed.

#   # Step 3: Delete the .env file
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         rm backend/matching_service/src/.env
# #User Service
#   # Step 1: Create the .env file in backend/user_service/src
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         gcloud secrets versions access latest --secret=user_service > backend/user_service/src/.env
#         # Add any additional steps to modify or process the .env file as needed.
#   # Step 2: Build your Docker image in backend/user_service
#   - name: 'gcr.io/cloud-builders/docker'
#     args:
#       - 'build'
#       - '-t'
#       - 'gcr.io/$PROJECT_ID/user_service'
#       - ./backend/user_service
#     # Add any other Docker build options as needed.

#   # Step 3: Delete the .env file
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         rm backend/user_service/src/.env
#   # Step 1: Create the .env file in /frontend
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         gcloud secrets versions access latest --secret=frontend_service > frontend/.env
#         # Add any additional steps to modify or process the .env file as needed.
#   # Step 2: Build your Docker image in /frontend
#   - name: 'gcr.io/cloud-builders/docker'
#     args:
#       - 'build'
#       - '-t'
#       - 'gcr.io/$PROJECT_ID/frontend_service'
#       - ./
#     # Add any other Docker build options as needed.

#   # Step 3: Delete the .env file
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         rm frontend/.env
images:
  - 'gcr.io/$PROJECT_ID/question_service:latest'
  # - 'gcr.io/$PROJECT_ID/matching_service:latest'
  # - 'gcr.io/$PROJECT_ID/user_service:latest'
  # - 'gcr.io/$PROJECT_ID/frontend_service:latest'