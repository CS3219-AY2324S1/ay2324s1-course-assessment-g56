#Question Service
steps:
  # Step 1: Create the .env file in backend/question_service
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret=question_service > backend/question_service/.env
  # Step 2: Install dependencies
  - name: 'node:18'
    entrypoint: 'npm'
    args:
      - 'install'
      - '--prefix'
      - '.'
    dir: 'backend/question_service'
  # Step 3: Run tests
  - name: 'node:18'
    entrypoint: 'npm'
    args:
      - 'test'
    dir: 'backend/question_service' 
# Step 4: Build your Docker image in backend/question_service
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/question_service'
      - ./backend/question_service
# Step 5: Delete the .env file
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        rm backend/question_service/.env
# Matching Service
  # Step 1: Create the .env file in backend/matching_service/
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret=matching_service > backend/matching_service/.env
  # Step 2: Install dependencies
  - name: 'node:18'
    entrypoint: 'npm'
    args:
      - 'install'
      - '--prefix'
      - '.'
    dir: 'backend/matching_service'
  # Step 3: Run tests
  - name: 'node:18'
    entrypoint: 'npm'
    args:
      - 'test'
    dir: 'backend/matching_service' 
  # Step 4: Build your Docker image in backend/matching_service
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/matching_service'
      - ./backend/matching_service
    # Add any other Docker build options as needed.
  # Step 5: Delete the .env file
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        rm backend/matching_service/.env
#User Service
  # Step 1: Create the .env file in backend/user_service/
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret=user_service > backend/user_service/.env
        # Add any additional steps to modify or process the .env file as needed.
  # Step 2: Install dependencies
  - name: 'node:18'
    entrypoint: 'npm'
    args:
      - 'install'
      - '--prefix'
      - '.'
    dir: 'backend/user_service'
  # Step 3: Run tests
  - name: 'node:18'
    entrypoint: 'npm'
    args:
      - 'test'
    dir: 'backend/user_service' 
  # Step 4: Build your Docker image in backend/user_service
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/user_service'
      - ./backend/user_service
  # Step 5: Delete the .env file
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        rm backend/user_service/.env
# Frontend service
  # Step 1: Create the .env file in /frontend
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret=frontend_service > frontend/.env
        # Add any additional steps to modify or process the .env file as needed.
  # Step 2: Build your Docker image in /frontend
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/frontend_service'
      - ./frontend
    # Add any other Docker build options as needed.

  # Step 3: Delete the .env file
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        rm frontend/.env
  # Trigger update of images in deployed to GKE
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$_BUILD_STATUS" == "SUCCESS" ]; then
          gcloud pubsub topics publish update-images --message "Build successful at $BUILD_ID"
        fi
images:
  - 'gcr.io/$PROJECT_ID/question_service:latest'
  - 'gcr.io/$PROJECT_ID/matching_service:latest'
  - 'gcr.io/$PROJECT_ID/user_service:latest'
  - 'gcr.io/$PROJECT_ID/frontend_service:latest'